        -:    0:Source:mintf.c
        -:    0:Graph:mintf.gcno
        -:    0:Data:mintf.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <stdarg.h>
        -:    3:#include <stdio.h>
        -:    4:#include "mintf.h"
        -:    5:#define NUMBER 48
        -:    6:#define ALPHABET 87
        -:    7:#define NUMBER_CHECK 9
        -:    8:
        -:    9:void mintf(const char *format, ...);
        -:   10:void print_integer(int n, int radix, char* prefix);
        -:   11:
        4:   12:void mintf(const char *format, ...) {
        -:   13:	va_list hw;         //declare the va_list
        4:   14:	int i = 0;           //i used in for loop   
        4:   15:	int index = 0;            //index
        -:   16:	double argumentValue;     // double receiver
        4:   17:	int percentSign = 37;      //percentSign
        4:   18:	int integerValue = 0;      //declare the integer value
        4:   19:	int decimalValue = 0;       //declare the decimal value
        4:   20:	char *stringReceiver = 0;     //declare char* data receiver
        4:   21:	int charReceiver = 0;          //declare character data receiveri
        -:   22:
        -:   23:
        4:   24:	va_start(hw, format);
        -:   25:
       91:   26:	while(format[index] != '\0') { 
       83:   27:		if(format[index] == '%') {
        8:   28:			index++;
        8:   29:			if(index != '\0') {
        8:   30:				if(format[index] == '%') {
        1:   31:					fputc(percentSign, stdout);
        -:   32:				}
        7:   33:				else if(format[index] == 'd') {
        2:   34:					print_integer(va_arg(hw, int), 10, "");
        -:   35:				}
        5:   36:				else if(format[index] == 'x') {
        1:   37:					print_integer(va_arg(hw, int), 16, "0x");
        -:   38:				}
        4:   39:				else if(format[index] == 'b') {
    #####:   40:					print_integer(va_arg(hw, int), 2, "0b");
        -:   41:				}
        4:   42:				else if(format[index] == 'c') {
    #####:   43:					charReceiver = va_arg(hw, int);
    #####:   44:					fputc(charReceiver, stdout);
        -:   45:				}
        4:   46:				else if(format[index] == '$') {
        1:   47:					argumentValue = va_arg(hw, double);
        1:   48:					integerValue = (int)argumentValue;
        1:   49:					decimalValue = abs((int)((argumentValue - integerValue) * 100));
        1:   50:					print_integer(integerValue, 10, "$");
        1:   51:					fputc(percentSign + 9, stdout);
        1:   52:					print_integer(decimalValue, 10, "");
        -:   53:				}
        3:   54:				else if(format[index] == 's') {
        2:   55:					stringReceiver = va_arg(hw, char*);
       17:   56:					for(i = 0; stringReceiver[i] != '\0'; i++) {
       15:   57:						fputc(stringReceiver[i], stdout);
        -:   58:					}
        -:   59:				}
        -:   60:				else {
        1:   61:					index--;
        1:   62:					fputc(percentSign, stdout);
        -:   63:				}
        -:   64:			}
        -:   65:		}
        -:   66:		else {
       75:   67:			fputc(format[index], stdout);
        -:   68:		}
       83:   69:		index++;
        -:   70:	}
        4:   71:}
        -:   72:
        5:   73:void print_integer(int n, int radix, char* prefix) {
        -:   74:
        5:   75:	int remainder = 0;  //delcare variable remainder
        5:   76:	int count = 0;      //declare variable count
        5:   77:	int copy_of_count = 0;    //declare variable copy_of_count
        5:   78:	unsigned int copy_of_n = n;		//create a copy of n
        5:   79:	unsigned int copy2_of_n = n; 	//create another copy of n
        5:   80:	int idx = 0;        //declare variable idx
        -:   81:
        5:   82:	if(n == 0) {
    #####:   83:		while(prefix[idx] != '\0') {
    #####:   84:			fputc(prefix[idx], stdout);
    #####:   85:			idx++;	
        -:   86:		}  
    #####:   87:		fputc('0', stdout);	
        -:   88:	}
        -:   89:	else {
        5:   90:		if(n < 0) {
        3:   91:			copy_of_n = -copy_of_n;    //make positive
        3:   92:			copy2_of_n = -copy2_of_n;
        3:   93:			fputc('-', stdout);
        -:   94:		}
       13:   95:		while(prefix[idx] != '\0') {
        3:   96:			fputc(prefix[idx], stdout);
        3:   97:			idx++;
        -:   98:		}
       24:   99:		while(count != copy2_of_n) {
       14:  100:			copy_of_count = count;
       58:  101:			while(copy_of_n > copy_of_count) {
       30:  102:				remainder = copy_of_n % radix;
       30:  103:				count = copy_of_n;       //reserve the value of copy_of_n
       30:  104:				copy_of_n /= radix;
        -:  105:				}
       14:  106:			copy_of_n = copy2_of_n;
       14:  107:			if (remainder > NUMBER_CHECK) {
        1:  108:				remainder += ALPHABET;
        -:  109:			}
        -:  110:			else {	
       13:  111:				remainder += NUMBER;
        -:  112:			}
       14:  113:			fputc(remainder, stdout);
        -:  114:		}
        -:  115:	}
        5:  116:}
